登录使用near-api-js的login
example:

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)

near登录后需向中心化服务器发送account_id, signature, publick_key
signature获取方法如下：

const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore()
const keyPair = await keyStore.getKey(config.networkId, <ACCOUNT_ID>);
const msg = Buffer.from(<ACCOUNT_ID>);
const { signature } = keyPair.sign(msg);
const publick_key = keyPair.publick_key
let msg = {
  account_id: "bhc8521.testnet",
  signature: Array.from(signature),
  public_key: Array.from(public_key)
}

测试用服务器：8.131.250.55:8888


====================================================================== 帖子相关 ===========================================================================
1./api/login  POST  //登录
{
  account_id: String,
  signature: String,
  publick_key: String
}
return
{
  success: boolean,
  token: String       //验证登录用token, request header格式为 { 'Authorization': 'token xxx' }
}

2./api/get_recommend_posts GET  //首页推荐的6个items
return
{
  success: boolean,
  data: [{
    account_id: String,
    create_time: Date,   //正常的date
    args: {
        text: String,
        imgs: [String],
        is_public: Boolean,
        token_id: String,
        amount_to_access: Number,
    }
  }]
}


3.get_explore_posts  POST    //explore页面的瀑布流
{
  page: Number,
  limit: Number,
}
return
{
  success: boolean,
  data: [{
    account_id: String,
    create_time: Date,   //正常的date
    args: {
        text: String,
        imgs: [String],
        is_public: Boolean,
        token_id: String,
        amount_to_access: Number,
    }
  }]
}

4./api/get_user_posts   POST     //个人页瀑布流
{
  account_id: String,     //要查询的账号
  page: Number,
  limit: Number,
}
return
{
  success: boolean,
  data: [{
    account_id: String,
    create_time: Date,   //正常的date
    args: {
        text: String,
        imgs: [String],
        is_public: Boolean,
        token_id: String,
        amount_to_access: Number,
    }
  }]
}

5./api/new_post    POST    //发帖 需要登录token
{
  text: String,
  account_id: String,
  imgs: [String],
  is_public: Boolean,
  token_id: String,
  amount_to_access: Number,
}
return
{
  success: boolean
}

6./api/new_comment    POST    //往帖子里发评论 需要登录token
{
  post_id: String,     //对应的帖子_id  (mongodb里的默认id)
  text: String,
}
return
{
  success: boolean
}

7./api/get_comments   POST    //获取帖子中的评论
{
  post_id: String,
  page: Number,
  limit: Number
}
return
{
  success::boolean,
  data: [{
      post_id: String,
      text: String,
      account_id: String,
      create_time: Date
  }]
}



====================================================================== 个人资料相关 ===========================================================================

8./api/get_user_profile   POST  //获取个人信息
{
  account_id: String   //如果是查看自己则空
}
return
{
  success: true,
  data: {
    account_id: String,
    bio: String,
    avatar: String,
    background: String,
    media: [{
      name: String,
      url: String,
    }],
    following: Number,     //正在关注人数
    followers: Number      //被关注人数

    email: String   //如果查看的是自己则返回
  }
}

9./api/edit_user_profile   POST   //改个人信息 需要登录token
{
  bio: String,
  avatar: String,
  background: String,
  email: String,
  media: [{
    name: String,
    url: String,
  }]
}
return
{
  success: boolean,
}

10./api/check_follow    POST    //查看是否follow这个人 需要登录token
{
  account_id: String
}
return
{
  success: boolean,
  data: boolean
}

11./api/follow     POST   //关注 需要登录token
{
  account_id: String
}
return
{
  success: boolean,
}

12./api/unfollow    POST   //取消关注 需要登录token
{
  account_id: String
}
return
{
  success: boolean
}


====================================================================== 索引接口相关 ===========================================================================

13./api/get_token_holder_count      POST   //获取这些币的持有人数
{
  token_ids: [String]     //币的账户地址
}
return
{
  success: boolean,
  data: [
    {
      count: Number
    }
  ]
}

14./api/get_explore_linkdrop     POST   //获取首页瀑布流的linkdrop
{
  offset_timestamp: Number    //毫秒
  limit: Number
}
return
{
  account_id: String,         //空投发起人
  create_time: String,        //纳秒
  args: {
      total_count: u32,        //空投总地址数量
      amount_per_account: U128,    //每个空投的量
      start_time: U64,         //开始时间  纳秒
      end_time: U64,           //结束时间  纳秒
      token_id: AccountId,       //币的账户地址
      public_key: Base58PublicKey    //空投key
  }
}

14./api/get_user_linkdrop     POST   //获取首页瀑布流的linkdrop
{
  account_id: String          //如果为空则为自己并需要登录token
  offset_timestamp: Number    //毫秒
  limit: Number
}
return
{
  account_id: String,         //空投发起人
  create_time: String,        //纳秒
  args: {
      total_count: u32,        //空投总地址数量
      amount_per_account: U128,    //每个空投的量
      start_time: U64,         //开始时间  纳秒
      end_time: U64,           //结束时间  纳秒
      token_id: AccountId,       //币的账户地址
      public_key: Base58PublicKey    //空投key
  }
}